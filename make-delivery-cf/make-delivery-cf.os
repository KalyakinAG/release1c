#Использовать cli
#Использовать fs
#Использовать "."

Функция ПолучитьПравилаОбновления(Настройка)
	//  Из текущего каталога
	Если ФС.Существует("MergeSettings.xml") Тогда
		Возврат "MergeSettings.xml";
	КонецЕсли;
	//  Из рабочего каталога
	ИмяФайлаПравилОбъединения = ОбъединитьПути(Настройка.workingDir, "MergeSettings.xml");
	Если ФС.Существует(ИмяФайлаПравилОбъединения) Тогда
		Возврат ИмяФайлаПравилОбъединения;
	КонецЕсли;
	//  Из каталога сценария
	КаталогСценария = СтартовыйСценарий().Каталог;
	СоставПути = СтрРазделить(КаталогСценария, ПолучитьРазделительПути());
	СоставПути.Удалить(СоставПути.ВГраница());
	СоставПути.Добавить("MergeSettings.xml");
	ИмяФайлаПравилОбъединения = СтрСоединить(СоставПути, ПолучитьРазделительПути());
	Возврат ИмяФайлаПравилОбъединения;
КонецФункции

Функция ПрочитатьДанныеИзФайлаJSON(ИмяФайла)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Данные;
КонецФункции

Процедура ЗаписатьДанныеВФайлJSON(Данные, ИмяФайла)
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8", , ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	Перем РабочийКаталог;
	password = Команда.ЗначениеОпции("password");
	update = Команда.ЗначениеОпции("update");
	ФайлНастроек = Команда.ЗначениеОпции("settings");

	Настройка = ПрочитатьДанныеИзФайлаJSON(ФайлНастроек);

	ПараметрыХранилищаDevelop = Новый Структура("СтрокаСоединения, Пользователь, Пароль", Настройка.repoConnStringDevelop, Настройка.repoUser, password);
	ПараметрыХранилищаMaster = Новый Структура("СтрокаСоединения, Пользователь, Пароль", Настройка.repoConnStringMaster, Настройка.repoUser, password);
	
	Настройка.Свойство("workingDir", РабочийКаталог);
	Если НЕ ЗначениеЗаполнено(РабочийКаталог) Тогда
		РабочийКаталог = ТекущийКаталог();
	КонецЕсли;
	//  Исполнение
	РаботаСПоставкой.МаскаВерсииПлатформы = Настройка.platformVersion;
	Результат = РаботаСПоставкой.ВыгрузитьПоследнююВерсиюХранилища(ПараметрыХранилищаDevelop, ОбъединитьПути(РабочийКаталог, "delivery_%1.cf"), Настройка.repoNumberDevelop);
	Сообщить(СтрШаблон("Обновление develop версии %1 -> %2", Настройка.repoNumberDevelop, Результат.НомерВерсии));
	Настройка.repoNumberDevelop = Результат.НомерВерсии;
	Если update И Настройка.repoNumberMaster <> Результат.НомерВерсии Тогда
		РаботаСПоставкой.ОбъединитьКонфигурациюИОбновитьХранилище(ПараметрыХранилищаMaster, Результат.ИмяФайлаКонфигурации, Результат.НомерВерсии, ПолучитьПравилаОбновления(Настройка));
		Сообщить(СтрШаблон("Обновление master версии %1 -> %2", Настройка.repoNumberMaster, Результат.НомерВерсии));
		Настройка.repoNumberMaster = Результат.НомерВерсии;
	КонецЕсли;

	ЗаписатьДанныеВФайлJSON(Настройка, ФайлНастроек);
	
КонецПроцедуры

Приложение = Новый КонсольноеПриложение("make-delivery-cf", "Создание поставки и обновление master хранилища");
Приложение.Версия("v version", "2.0.1");
Приложение.УстановитьОсновноеДействие(ЭтотОбъект);
Приложение.Опция("s settings", "settings.json", "указать имя файла настроек");
Приложение.Опция("p password", "", "указать пароль к хранилищу");
Приложение.Опция("u update", Ложь, "обновить master хранилище");
Приложение.Запустить(АргументыКоманднойСтроки);
