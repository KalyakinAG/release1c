#Использовать 1connector
#Использовать v8storage
#Использовать cli

Перем Домен;
Перем Порт;
Перем Участники;
Перем МаскаВерсииПлатформы;

Функция JSONВОбъект(СтрокаJSON, ПрочитатьВСоответствие = Ложь) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
КонецФункции

Функция ПолучитьРезультатHTTP(URL, token)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("cache-control", "no-cache");
	Заголовки.Вставить("X-Atlassian-Token", "nocheck");
		
	ПараметрыПреобразованияJSON = Новый Структура;
	ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", Ложь);
	ПараметрыПреобразованияJSON.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияJSON.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МаксимальноеКоличествоПовторов", 5);
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
	
    Возврат КоннекторHTTP.Get(URL, , ДополнительныеПараметры).json();
КонецФункции

Функция ПолныйURL(URL, Формат = "json")
	Возврат СтрШаблон("https://%1:%2/%3%4", Домен, Порт, URL, ?(ПустаяСтрока(Формат), "", "." + Формат));
КонецФункции

Процедура ЗаписатьДанныеВФайлJSON(Данные, ИмяФайла)
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8", , ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	ЗаписьJSON.Закрыть();
КонецПроцедуры

Функция ПрочитатьДанныеИзФайлаJSON(ИмяФайла)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Данные;
КонецФункции

// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СвернутьМассив(Знач Массив) Экспорт
	Данные = Новый Массив;
	ДополнитьМассив(Данные, Массив, Истина);
	Возврат Данные;
КонецФункции

Функция СоздатьЗадачу(ИдентификаторЗадачи)
	ОписаниеЗадачи = Новый Структура;
	ОписаниеЗадачи.Вставить("Проект", "ЕФС");
	ОписаниеЗадачи.Вставить("Задача", ИдентификаторЗадачи);
	ОписаниеЗадачи.Вставить("Раздел", "");
	ОписаниеЗадачи.Вставить("Состояние", "");
	ОписаниеЗадачи.Вставить("Приоритет", "");
	ОписаниеЗадачи.Вставить("Автор", "");
	ОписаниеЗадачи.Вставить("Заголовок", "");
	ОписаниеЗадачи.Вставить("Описание", "");
	ОписаниеЗадачи.Вставить("Исполнитель", "");
	ОписаниеЗадачи.Вставить("Разработчик", "");
	ОписаниеЗадачи.Вставить("ЕстьВРелизе", Ложь);
	ОписаниеЗадачи.Вставить("БезКода", Ложь);
	ОписаниеЗадачи.Вставить("Метки", "");
	Возврат ОписаниеЗадачи;
КонецФункции

Функция ПолучитьОписаниеЗадачи(Задача, ЕстьВРелизе = Истина)
	Поля = Задача["fields"];
	ОписаниеЗадачи = Новый Структура;
	ИдентификаторЗадачи = Задача["key"];
	issuelinks = Поля["issuelinks"];
	Если issuelinks.ВГраница() <> -1 Тогда
		Для каждого issuelink Из issuelinks Цикл
			Если issuelink["outwardIssue"] <> Неопределено Тогда
				ОписаниеЗадачи.Вставить("Проект", issuelink["outwardIssue"]["fields"]["summary"]);
				//Прервать;
			КонецЕсли;
		КонецЦикла;
		//inwardIssue
	Иначе
		ОписаниеЗадачи.Вставить("Проект", "");
	КонецЕсли;
	components = Поля["components"];
	Если components.ВГраница() <> -1 Тогда
		ОписаниеЗадачи.Вставить("Раздел", components[0]["name"]);
	Иначе
		ОписаниеЗадачи.Вставить("Раздел", "");
	КонецЕсли;
	ОписаниеЗадачи.Вставить("Приоритет", Поля["priority"]["name"]);
	ОписаниеЗадачи.Вставить("Задача", ИдентификаторЗадачи);
	ОписаниеЗадачи.Вставить("Состояние", Поля["status"]["name"]);
	ОписаниеЗадачи.Вставить("Автор", Поля["creator"]["displayName"]);
	ОписаниеЗадачи.Вставить("Заголовок", Поля["summary"]);
	ОписаниеЗадачи.Вставить("Описание", Поля["description"]);
	Исполнитель = Поля["assignee"];
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОписаниеЗадачи.Вставить("Исполнитель", "Не назначен");
		ОписаниеЗадачи.Вставить("Разработчик", "Не назначен");
	Иначе
		ОписаниеЗадачи.Вставить("Исполнитель", Исполнитель["displayName"]);
		ОписаниеЗадачи.Вставить("Разработчик", Исполнитель["displayName"]);
	КонецЕсли;
	Разработчик = Поля["customfield_11202"];
	Если ЗначениеЗаполнено(Разработчик) Тогда
		ОписаниеЗадачи.Вставить("Разработчик", Разработчик["displayName"]);
	КонецЕсли;
	ОписаниеЗадачи.Вставить("ЕстьВРелизе", ЕстьВРелизе);
	ОписаниеЗадачи.Вставить("БезКода", Ложь);
	Метки = Поля["labels"];
	Если Метки <> Неопределено Тогда
		ОписаниеЗадачи.Вставить("Метки", Метки);
	КонецЕсли;
	Возврат ОписаниеЗадачи;
КонецФункции

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	Перем РабочийКаталог;
	//  Чтение параметров запуска
	password = Команда.ЗначениеОпции("password");
	token = Команда.ЗначениеОпции("token");
	ФайлНастроек = Команда.ЗначениеОпции("settings");
	Настройка = ПрочитатьДанныеИзФайлаJSON(ФайлНастроек);
	Настройка.Свойство("workingDir", РабочийКаталог);
	Если НЕ ЗначениеЗаполнено(РабочийКаталог) Тогда
		РабочийКаталог = ТекущийКаталог();
	КонецЕсли;
	//  Чтение настроек
	releaseVersion = Настройка.releaseVersion;
	МаскаВерсииПлатформы = Настройка.platformVersion;
	Проект = Настройка.jira.project;
	Домен = Настройка.jira.domain;
	Порт = Настройка.jira.port;
	//{  Формирование описания
	Данные = Новый Структура;
	Данные.Вставить("НомерРелиза", Настройка.repoNumberRelease);
	Данные.Вставить("ВерсияРелиза", releaseVersion);
	Данные.Вставить("ПоследнийНомерРелиза", Настройка.repoNumberMaster);
	Данные.Вставить("Текст", "");
	Данные.Вставить("ИдентификаторВерсии", "");

	ЗадачиРелизаБезКода = Новый Соответствие;

	//  Задачи релиза

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("cache-control", "no-cache");
	Заголовки.Вставить("X-Atlassian-Token", "nocheck");
	Заголовки.Вставить("Authorization", "Bearer " + token);// авторизация по apiKey

	ПараметрыПреобразованияJSON = Новый Структура;
	ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", Истина);
	ПараметрыПреобразованияJSON.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияJSON.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МаксимальноеКоличествоПовторов", 5);
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	ДополнительныеПараметры.Вставить("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON);
	
	ПоляЗапроса = СтрШаблон("{
	|""maxResults"": 100,
	|""startAt"": 0,
	|""fields"": [
	|""id"",
	|""key"",
	|""self"",
	|""updated"",
	|""created"",
	|""status"",
	|""creator"",
	|""reporter"",
	|""issuetype"",
	|""description"",
	|""summary"",
	|""assignee"",
	|""customfield_11202"",
	|""comment"",
	|""worklog"",
	|""labels"",
	|""fixVersions"",
	|""priority"",
//	|""releaseDate"",
	|""issuelinks""
	|],
	|""jql"": ""project = %1 AND fixVersion = %2""
	|}", Проект, releaseVersion);

	ПоляЗапроса = СтрШаблон("{
	|""maxResults"": 100,
	|""startAt"": 0,
	|""jql"": ""project = %1 AND fixVersion = %2""
	|}", Проект, releaseVersion);
	//https://jira.pik.ru/rest/api/latest/issue/EFS-11014
	URL = "https://jira.pik.ru/rest/api/latest/search";
	HTTPЗапрос = Новый HTTPЗапрос(URL, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ПоляЗапроса, КодировкаТекста.UTF8);
	Соединение = Новый HTTPСоединение("https://" + Домен, , , , , 60);
	HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос); //POST запрос
	Попытка
		РезультатHTTP = JSONВОбъект(HTTPОтвет.ПолучитьТелоКакСтроку(), Истина);
		issues = РезультатHTTP["issues"];
	Исключение
		issues = Новый Массив;
		Сообщить("Ошибка получение результата Jira" + HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецПопытки;
	
	Задачи = Новый Массив;
	ЗадачиРелиза = Новый Соответствие;
	Для каждого Задача Из issues Цикл
		ОписаниеЗадачи = ПолучитьОписаниеЗадачи(Задача);

		Метки = Неопределено;
		Если ОписаниеЗадачи.Свойство("Метки", Метки) Тогда
			Если Метки.Найти("Описание_релиза") <> Неопределено Тогда
				Данные.Вставить("Текст", ОписаниеЗадачи.Описание);
				Данные.Вставить("ДатаРелиза", Задача["fields"]["fixVersions"][0]["releaseDate"]);
				Продолжить;
			КонецЕсли;
			Если Ложь
				ИЛИ Метки.Найти("Без_кода") <> Неопределено
				ИЛИ Метки.Найти("Расширение") <> Неопределено
				ИЛИ Метки.Найти("Обработка") <> Неопределено
				ИЛИ Метки.Найти("Отчет") <> Неопределено
			Тогда
				ОписаниеЗадачи.Вставить("БезКода", Истина);
			КонецЕсли;
		КонецЕсли;
		Задачи.Добавить(ОписаниеЗадачи);
		ЗадачиРелиза[ОписаниеЗадачи.Задача] = ОписаниеЗадачи;
	КонецЦикла;

	Данные.Вставить("Задачи", Задачи);

	ПараметрыПодключения = Новый Структура("СтрокаСоединения, Пользователь, Пароль", Настройка.repoConnStringDevelop, Настройка.repoUser, password);
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();

	Конфигуратор = ХранилищеКонфигурации.ПолучитьУправлениеКонфигуратором();
	Конфигуратор.ИспользоватьВерсиюПлатформы(МаскаВерсииПлатформы);

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПараметрыПодключения.СтрокаСоединения);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(ПараметрыПодключения.Пользователь, ПараметрыПодключения.Пароль);
	ХранилищеКонфигурации.ПрочитатьХранилище(Настройка.repoNumberRelease);

	//Номер,Дата,Время,Версия,Автор,Комментарий,Метка,КомментарийМетки,Изменены,Добавлены,Удалены
	ТаблицаВерсий = ХранилищеКонфигурации.ПолучитьТаблицуВерсий();
	ТаблицаВерсий.Колонки.Добавить("Задачи");

	РегулярноеВыражение = Новый РегулярноеВыражение("(\#\w+-\d+)|(\#\w+)");

	ЗадачиВнеРелиза = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаВерсий Цикл
		СтрокаТаблицы.Задачи = Новый Массив; 
		Если ПустаяСтрока(СтрокаТаблицы.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		Совпадения = РегулярноеВыражение.НайтиСовпадения(СтрокаТаблицы.Комментарий);
		Для каждого ЭлементСовпадения Из Совпадения Цикл
			ИдентификаторЗадачи = Прав(ЭлементСовпадения.Значение, СтрДлина(ЭлементСовпадения.Значение) - 1);
			СтрокаТаблицы.Задачи.Добавить(ИдентификаторЗадачи);
			Если ИдентификаторЗадачи = "BugFix" ИЛИ ИдентификаторЗадачи = "Release" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗадачиРелиза[ИдентификаторЗадачи] = Неопределено Тогда
				ЗадачиВнеРелиза.Добавить(ИдентификаторЗадачи);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	СвернутьМассив(ЗадачиВнеРелиза);
	Для каждого Задача Из ЗадачиВнеРелиза Цикл
		ОписаниеЗадачи = СоздатьЗадачу(Задача);
		Задачи.Добавить(ОписаниеЗадачи);
	КонецЦикла;

	Данные.Вставить("ТаблицаВерсий", ТаблицаЗначенийВМассив(ТаблицаВерсий));

	ЗаписатьДанныеВФайлJSON(Данные, ОбъединитьПути(РабочийКаталог, "release-data.json"));
	ЗаписатьДанныеВФайлJSON(Данные.ТаблицаВерсий, ОбъединитьПути(РабочийКаталог, "release-changes.json"));
КонецПроцедуры

Приложение = Новый КонсольноеПриложение("release", "формирование данных по задачам релиза и из хранилища разработки.
|На выходе формируются файлы:
|- release-data.json - данные
|- release-changes.json - история работы с хранилищем разработки");
Приложение.Версия("v version", "2.0.1");
Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

Приложение.Опция("s settings", "settings.json", "указать имя файла настроек");
Приложение.Опция("p password", "", "указать пароль к хранилищу");
Приложение.Опция("t token", "", "apiKey к jira");
Приложение.Запустить(АргументыКоманднойСтроки);
