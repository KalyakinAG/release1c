&НаКлиенте
Функция ПрочитатьДанныеИзФайлаJSON(ИмяФайла)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	Данные = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Данные;
КонецФункции

&НаКлиенте
Процедура КомандаПечать(Команда)
	КодВозврата = 0;
	ПутьКФайлуНастроек = Объект.РабочийКаталог + "\settings.json";
	СтрокаЗапуска = СтрШаблон("make-release-data.bat -p %1 -t %2 -s %3", Объект.Пароль, Объект.JiraToken, ПутьКФайлуНастроек);
	ЗапуститьПриложение(СтрокаЗапуска, Объект.РабочийКаталог, Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		Сообщить("Ошибка выгрузки данных релиза!");
		Сообщить(СтрШаблон("Ошибка: %1: %2", КодВозврата, СтрокаЗапуска));
		Возврат;
	КонецЕсли;
	Настройки = ПрочитатьДанныеИзФайлаJSON(Объект.РабочийКаталог + "\settings.json");
	Данные = ПрочитатьДанныеИзФайлаJSON(Объект.РабочийКаталог + "\release-data.json");
	СформироватьОтчет(Данные, Настройки);
	Печать(Объект.ЗадачиРелиза, СтрШаблон("Релиз ЕФС %1", СтрЗаменить(Объект.ВерсияРелиза, ".", "_")));
КонецПроцедуры

// Вывести заголовок.
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - Табличный документ
//  Заголовок - Строка - Заголовок
&НаСервере
Процедура ВывестиЗаголовок(ТабличныйДокумент, Заголовок)
	Секция = ТабличныйДокумент.ПолучитьОбласть("R1");
	Секция.Область("R1C1").Текст = Заголовок;
	ТабличныйДокумент.Вывести(Секция);
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет(Данные, Настройки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьОписаниеРелиза(Данные, Настройки);
	ОбработкаОбъект.СформироватьОтчет(Данные, Настройки);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура Печать(ТабличныйДокумент, Заголовок)
	ИдентификаторПечатнойФормы = ОбщийКлиентСервер.ИмяПоУникальномуИдентификатору();
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = Заголовок;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = Заголовок;
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура("ЗаголовокФормы", Заголовок));
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзмененияМетаданных(Команда)
	Настройки = ПрочитатьДанныеИзФайлаJSON(Объект.РабочийКаталог + "\settings.json");
	Данные = ПрочитатьДанныеИзФайлаJSON(Объект.РабочийКаталог + "\release-data.json");
	КомандаИзмененияМетаданныхНаСервере(Данные, Настройки);
КонецПроцедуры

&НаСервере
Процедура КомандаИзмененияМетаданныхНаСервере(Данные, Настройки)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьОтчетПоМетаданным(Данные, Настройки);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура КомандаМакет(Команда)
	КомандаМакетНаСервере();
КонецПроцедуры

&НаСервере
Функция ТекстВОбласть(Элемент, Параметры) Экспорт
	ИмяОбласти = Лев(Элемент, 2);
	Если Параметры.Области.Найти(ИмяОбласти) <> Неопределено Тогда
		Область = Параметры.ПолучитьОбласть(ИмяОбласти);
		Область.Параметры.Текст = Прав(Элемент, СтрДлина(Элемент) - 4);
	Иначе
		Область = Параметры.ПолучитьОбласть("Строка");
		Область.Параметры.Текст = Элемент;
	КонецЕсли;
	Возврат Область;
КонецФункции

&НаСервере
Процедура ОчиститьОбласти(ТабличныйДокумент)
	Области = ТабличныйДокумент.Области;
	Колво = Области.Количество();
	Для й = 1 По Колво Цикл
		Области[Колво - й].Имя = "";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КомандаМакетНаСервере()
	// Вставить содержимое обработчика.
	ТабличныйДокумент = Объект.ОписаниеИзмененийСистемы;
	ТабличныйДокумент.Очистить();
	_Обработка = РеквизитФормыВЗначение("Объект");
	МакетОписания = _Обработка.ПолучитьМакет("Макет");
	Макет = _Обработка.ПолучитьМакет("ОписаниеИзмененийСистемы");
	Текст = МакетОписания.ПолучитьТекст();
	РаботаСМассивом.АТДМассив(СтрРазделить(Текст, Символы.ВК+Символы.ПС, Ложь))
		.Отобрать("НЕ ПустаяСтрока(Элемент)")
		.Отобразить("Контекст.ТекстВОбласть(Элемент, Параметры)", ЭтотОбъект, Макет)
		.Положить(Макет.ПолучитьОбласть("Разделитель"))
		.ДляКаждого("Контекст.Вывести(Элемент)", ТабличныйДокумент)
	;
	ОчиститьОбласти(ТабличныйДокумент);
	ВерсияРелиза = "3.0.2.18";
	ТабличныйДокумент.Область(1, , 1, ).Имя = СтрШаблон("Шапка%1", СтрЗаменить(ВерсияРелиза, ".", "_"));
	ТабличныйДокумент.Область(2, , ТабличныйДокумент.ВысотаТаблицы, ).Имя = СтрШаблон("Версия%1", СтрЗаменить(ВерсияРелиза, ".", "_"));
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();
	Заголовок = СтрШаблон("%1, вер.%2", СведенияОВнешнейОбработке.Наименование, СведенияОВнешнейОбработке.Версия);
КонецПроцедуры

&НаКлиенте
Процедура АдресВнешнейСсылкиНажатие(Элемент)
	ЗапуститьПриложение("https://jira.pik.ru/projects/EFS?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page&status=released-unreleased");
КонецПроцедуры

&НаКлиенте
Процедура АдресКаналаТелеграмНажатие(Элемент)
	ЗапуститьПриложение("https://t.me/markdownbot");
КонецПроцедуры

&НаКлиенте
Асинх Процедура КомандаОтчетПоЗамечаниямSonarQube(Команда)
	Перем Параметры;
	Перем Команды;
	Перем url;
	
	//curl -u sqp_b2c1e6f55efa4c43d193d59d7bcbb1f0013ecff0: "https://sonarqube1c.picompany.ru/api/issues/search?projects=efs-dev&createdAfter=2024-11-06&createdBefore=2024-11-22&resolved=false" > sonar_report.json
	
	Параметры = Новый Структура;
	Параметры.Вставить("projects", "efs-dev");
	Параметры.Вставить("createdAfter", Формат(Объект.ДатаНачала, "ДФ=yyyy-MM-dd"));
	Параметры.Вставить("createdBefore", Формат(Объект.ДатаОкончания, "ДФ=yyyy-MM-dd"));
	Параметры.Вставить("resolved", "false");
	
	url = Новый Массив;
	url.Добавить("https://sonarqube1c.picompany.ru/api/issues/search?");
	url.Добавить(СтрСоединить(РаботаСМассивом.Отобразить(Параметры, "СтрШаблон('%1=%2', Элемент.Ключ, Элемент.Значение)"), "&"));
	
	Команды = Новый Массив;
	Команды.Добавить("curl");
	Команды.Добавить("-u " + Объект.SonarToken + ":");
	Команды.Добавить(СтрШаблон("""%1""", СтрСоединить(url, "")));
	Команды.Добавить(">");
	Команды.Добавить("sonar_report.json");
	
	СтрокаЗапуска = СтрСоединить(Команды, " ");
	
	КомандаСистемы(СтрокаЗапуска, Объект.РабочийКаталог);
	
	ПутьКФайлу = ОбщийКлиентСервер.ОбъединитьПути(Объект.РабочийКаталог, "sonar_report.json");
	Если НЕ ОбщийКлиентСервер.ФайлСуществует(ПутьКФайлу) Тогда
		Сообщить("Ошибка получения данных из SonarQube: файл не найден!");
		Возврат;
	КонецЕсли;
	Данные = ПрочитатьДанныеОтчетаSQ(ПутьКФайлу);
	Отчет = СформироватьОтчетSQ(Данные);
	Отчет.Показать(СтрШаблон("Отчет SQ за %1", СтрЗаменить(Объект.ВерсияРелиза, ".", "_")));
	
	//КодВозврата = Ждать ЗапуститьПриложениеАсинх(СтрокаЗапуска, Объект.РабочийКаталог, Истина);
	//Если КодВозврата <> 0 Тогда
	//	Сообщить("Ошибка получения данных из SonarQube!");
	//	Сообщить(СтрШаблон("Ошибка: %1: %2", КодВозврата, СтрокаЗапуска));
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетSQ(Данные)
 	Таблица = РаботаСКоллекцией.СтруктураВТаблицуЗначений(Данные);
	Результат = Общий.МодельМакетаКомпоновкиДанных(Таблица)
		.Скомпоновать()
		.Вывести()
	;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПрочитатьДанныеОтчетаSQ(ИмяФайла)
	Перем Таблица;
	ДанныеJSON = ОбщийКлиентСервер.ПрочитатьЗначениеJSONИзФайла(ИмяФайла);
	Замечания = РаботаСМассивом.ОтобразитьСвойстваЭлементов(ДанныеJSON.issues,
		"Автор = author, Модуль = component, Дата = creationDate, Сообщение = message, Важность = severity, Статус = status"
	);
	Таблица = Новый Структура("Тип, Колонки, Строки", "ТаблицаЗначений", Новый Массив, Новый Массив);
	Колонки = Таблица.Колонки;
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Дата", "ДАТА"));
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Автор", "СТРОКА(50)"));
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Модуль", "СТРОКА(150)"));
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Сообщение", "СТРОКА(200)"));
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Важность", "СТРОКА(20)"));
	Колонки.Добавить(Новый Структура("Имя, ТипЗначения", "Статус", "СТРОКА(10)"));
	Для Каждого Замечание Из Замечания Цикл
		Значения = Новый Массив;
		Для Каждого Колонка Из Колонки Цикл
			Значения.Добавить(Замечание[Колонка.Имя]);
		КонецЦикла;
		Таблица.Строки.Добавить(Значения);
	КонецЦикла;	
	ТаблицаJSON = ОбщийКлиентСервер.ЗначениеВJSON(Таблица);
	Возврат ТаблицаJSON;
КонецФункции